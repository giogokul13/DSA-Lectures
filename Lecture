Time and Space Complexity (TASC)

"Time and Space Complexity is the function which gives us the relationship about how your time will grow as the input grows"


Why Do we Need TASC?

1. Identify and optimize the process times in the operation




Which is Best?

O(1) <-- O(log n) <-- O(n) <--- O(2^N)


Points to consider while thinking on Complexities.

1. Always consider the worst-case complexities
2 Always Look the complexity of Large/Infinte Data
3. Renove the constants in calculating the complexities
4. Always ignore less dominating terms in calculation on complexities.

N^3 + N^2 + N + 6 = N^3 // as removing constants (6) and removing less dominant N^2 and N




Big Oh Notation (upper bound)

f(N)/g(N) < Infinity

Everything  mentioned in time complexity big Oh, is the maximun and there cannot be anything higer/more than that.



Big Omega Notation. (lower bound )

f(n)/f(n) > 0

Everything  mentioned in time complexity big Omega, is the minimum and there can be anything higer/more than that.

Opposite of Big Oh Notaion.


Big Theta Notation.

Combination of Big Oh and Big Omega.

0 < f(n)/g(n) < Infinity


Little Oh Notation.

Provides only the upper bound.

It is a Loose upper bound 



Little Omega Notation.

Provides the Loose lower bound of an algorithm.




Space Complexity.


Spacecomplexity = Input Space + Space required for the alogorithm.


Auxilary space is the Extra space/ temporary space used by the Algorithm



Recursive Algorithms

Space complexity of recursive program - is not constant O(1) is is always greater than constant 

Space complexity of recursion  > O(1)

Space complexity of the Recursion is always equal the height of the recusrsion tree

Space complexity  = height of the tree



2 Tyoes of recurions

1. Linear
2. Divide and Conquer

 
Divide and Conquer Recurrance relation


How to get the best compleixity?

1.AKra Bazzi Formaula
2. Masters Thorem.
3; plug and chug


Get the Best at Akra bazi formula.





 
